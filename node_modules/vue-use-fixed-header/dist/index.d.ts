import { ComputedRef } from 'vue';
import { CSSProperties } from 'vue';
import type { Ref } from 'vue';

export declare type MaybeTemplateRef = HTMLElement | null | Ref<HTMLElement | null>;

export declare function useFixedHeader(target: MaybeTemplateRef, options?: Partial<UseFixedHeaderOptions>): {
    styles: Readonly<CSSProperties>;
    isLeave: Readonly<ComputedRef<boolean>>;
    isEnter: Readonly<ComputedRef<boolean>>;
};

export declare interface UseFixedHeaderOptions<T = any> {
    /**
     * Scrolling container. Matches `document.documentElement` if `null`.
     *
     * @default null
     */
    root: MaybeTemplateRef;
    /**
     * Signal without `.value` (ref or computed) to be watched
     * for automatic behavior toggling.
     *
     * @default null
     */
    watch: Ref<T> | ComputedRef<T>;
    /**
     * Whether to transition `opacity` propert from 0 to 1
     * and vice versa along with the `transform` property
     *
     * @default false
     */
    transitionOpacity: boolean;
}

export { }
